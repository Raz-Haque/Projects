# -*- coding: utf-8 -*-
"""SE of England Food Industry

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mIntOf90YTQ10ywMGeCdJlHd0640NJVD
"""

import pandas as pd
import numpy as np
#Load excel files into notebook for historical
#Active businesses
historical_df_active_businesses = pd.read_excel('/content/businessdemographyexceltables2023.xlsx', sheet_name= "Table 3.1d", header=3)
print(historical_df_active_businesses.head)
#Business births
historical_df_births = pd.read_excel('/content/businessdemographyexceltables2023.xlsx', sheet_name= "Table 1.1d", header=3)
print(historical_df_births.head)
#business deaths
historical_df_deaths = pd.read_excel('/content/businessdemographyexceltables2023.xlsx', sheet_name= "Table 2.1d", header=3)
print(historical_df_deaths.head)

#Rename column header for area code and area
historical_df_active_businesses.columns = ["Area_Code", "Area_name", "2021_active", "2022_active", "2023_active","RowNumber"]
print(historical_df_active_businesses.head())
historical_df_births.columns = ["Area_Code", "Area_name", "2021_births", "2022_births", "2023_births","RowNumber"]
print(historical_df_births.head())
historical_df_deaths.columns = ["Area_Code", "Area_name", "2021_deaths", "2022_deaths", "2023_deaths","RowNumber"]
print(historical_df_deaths.head())
historical_df_active_businesses = historical_df_active_businesses.sort_values('RowNumber')
historical_df_births = historical_df_births.sort_values('RowNumber')
historical_df_deaths = historical_df_deaths.sort_values('RowNumber')

#Merge df into one df
historical_df = pd.merge(historical_df_active_businesses, historical_df_births, on=["Area_Code", "Area_name","RowNumber"])
historical_df = pd.merge(historical_df, historical_df_deaths, on=["Area_Code", "Area_name","RowNumber"])
print(historical_df.head())

#Load excel files into notebook for current conditions
#turnover dataset
current_conditions_employment = pd.read_excel("/content/ukbusinessworkbook2024.xlsx", sheet_name="Table 5", header=4)
print(current_conditions_employment.head())
#industry breakdown dataset
current_conditions_industries = pd.read_excel("/content/ukbusinessworkbook2024.xlsx", sheet_name="Table 6", header=3)
print(current_conditions_industries.head())
current_conditions_turnover = pd.read_excel("/content/ukbusinessworkbook2024.xlsx", sheet_name="Table 7", header=4)
print(current_conditions_turnover.head())

#rename unnamed header
#Split cells at ":"
new_column= current_conditions_employment['Unnamed: 0']. str.split(":", expand= True)
#name split columns
new_column.columns = ["Area_Code", "Area_name"]
#Drop original unnamed column
current_conditions_employment_clean = current_conditions_employment.drop(columns=['Unnamed: 0'])
#merge in two new column headers
current_conditions_employment_clean = pd.concat([new_column, current_conditions_employment_clean], axis=1)
print(current_conditions_employment_clean.head())
new_column_2= current_conditions_industries['Unnamed: 0']. str.split(":", expand= True)
#name split columns
new_column_2.columns = ["Area_Code", "Area_name"]
#Drop original unnamed column
current_conditions_industries_clean = current_conditions_industries.drop(columns=['Unnamed: 0'])
#merge in two new column headers
current_conditions_industries_clean = pd.concat([new_column_2, current_conditions_industries_clean], axis=1)
print(current_conditions_industries_clean.head())
new_column_3= current_conditions_turnover['Unnamed: 0']. str.split(":", expand= True)
#name split columns
new_column_3.columns = ["Area_Code", "Area_name"]
#Drop original unnamed column
current_conditions_turnover_clean = current_conditions_turnover.drop(columns=['Unnamed: 0'])
#merge in two new column headers
current_conditions_turnover_clean = pd.concat([new_column_3, current_conditions_turnover_clean], axis=1)
print(current_conditions_turnover_clean.head())

#merge dfs into one df
current_conditions = pd.merge(current_conditions_employment_clean, current_conditions_industries_clean, on=["Area_Code", "Area_name"])
current_conditions.head()
current_conditions = pd.merge(current_conditions, current_conditions_turnover_clean, on=["Area_Code", "Area_name"])
current_conditions.head()

#Remove white spaces
current_conditions['Area_Code'] = current_conditions['Area_Code'].str.strip()
current_conditions['Area_name'] = current_conditions['Area_name'].str.strip()

#Filter for south eas districts
#find first south east district in dataframe chronologically
startindex= current_conditions[ current_conditions['Area_Code']=="E14000530"]. index[0]
#Find last south east district chronologically
endindex = current_conditions [ current_conditions['Area_Code']== 'E14001056']. index [0]
#Slice for all regions between
south_east_districts_df = current_conditions.iloc[startindex:endindex]
south_east_districts_df.head()

#Create new columns for net change and net change rate
# Sum values for net births
historical_df["total_births_21_23"] = (
    historical_df["2021_births"] +
    historical_df["2022_births"] +
    historical_df["2023_births"]
)
#Sum values for deaths
historical_df["total_deaths_21_23"] = (
    historical_df["2021_deaths"] +
    historical_df["2022_deaths"] +
    historical_df["2023_deaths"]
)
#Calculate net change
historical_df["net_change_21_23"] = (
    historical_df["total_births_21_23"] -
    historical_df["total_deaths_21_23"]
)
#Sum active businesses
historical_df["total_active_21_23"] = (
    historical_df["2021_active"] +
    historical_df["2022_active"] +
    historical_df["2023_active"]
)
#Calculate net change rate
historical_df["net_change_rate_21_23"] = (
    historical_df["net_change_21_23"] /
    historical_df["total_active_21_23"]*100
)
historical_df.head()

#Save final preparaed dataset
historical_df.to_excel("historical_data.xlsx", index=False)
south_east_districts_df.to_excel("south_east_districts2.xlsx", index=False)

historical_df=pd.read_excel("historical data.xlsx", header=1)
historical_df.head()
#Remove white space
historical_df['Area Code'] = historical_df['Area Code'].str.strip()
historical_df.info()

#Create chloropath map
#Import classes
import plotly.express as px
import geopandas as gpd
import pandas as pd
#load geolocation data
gdf = gpd.read_file('/content/Local_Authority_Districts_December_2023_Boundaries_UK_BFC_-1664947894916204046.geojson')
import json
with open('/content/Local_Authority_Districts_December_2023_Boundaries_UK_BFC_-1664947894916204046.geojson') as f:
  geojson = json.load(f)
#merge geo data to historical data
merge_choropleth = gdf.merge(historical_df, left_on='LAD23CD', right_on='Area Code', how='left')
chloropath_map = px.choropleth(merge_choropleth, geojson= geojson, locations = merge_choropleth["LAD23CD"], color = "net_change_rate_21_23",
                               color_continuous_scale= 'Viridis', hover_name= "Area Name", projection= "mercator", labels = {"net_change_rate_21_23":"Net Change Rate (%)"}, featureidkey="properties.LAD23CD"
                                )
chloropath_map.update_geos(fitbounds="locations", visible = False)

#Adding labels of area name to the map.
#import class
import plotly.graph_objects as go
#get the centroids (x and y locations)
merge_choropleth['lon'] = merge_choropleth.geometry.centroid.x
merge_choropleth['lat'] = merge_choropleth.geometry.centroid.y
Chloro_with_area_labels = px.choropleth(
    merge_choropleth,
    geojson=geojson,
    locations='LAD23CD',
    featureidkey='properties.LAD23CD',
    color='net_change_rate_21_23',
    color_continuous_scale='Viridis',
    hover_name='Area Name',
    projection='mercator',
    labels={'net_change_rate_21_23': 'Net Change Rate (%)'}
)
Chloro_with_area_labels.add_trace(go.Scattergeo(
    lon = merge_choropleth['lon'],
    lat = merge_choropleth['lat'],
    text = merge_choropleth['Area Name'],
    mode = 'text',
    textfont=dict(color='black', size=3),
    showlegend=False
))

Chloro_with_area_labels.update_geos(fitbounds="locations", visible=False)
Chloro_with_area_labels.show()

#Save map as html
Chloro_with_area_labels.write_html("chloropath_map_with_labels.html")

#Download map
from google.colab import files
files.download("chloropath_map_with_labels.html")

#Create Pie Charts for highlighted districts turnover bands business counts

#Specify turnover columns
turnover_bands = ['250-499', '500-999', '1000-1999', '2000-4999', '5000-9999', '10000-49999', '50000+']
turnover_columns = [ col for col in south_east_districts_df. columns if (col.endswith('_y')or col in turnover_bands) and 'Total' not in col]
#Canterbury
#filter canterbury columns
turnover_Canterbury = south_east_districts_df[south_east_districts_df["Area_name"] == "Canterbury"]
Turnoverdata_Canterbury = turnover_Canterbury[turnover_columns].iloc [0]
Turnoverdata_Canterbury.index = [col.replace("_y", "") for col in Turnoverdata_Canterbury.index]
#Plot pie chart
import plotly.express as px
Cantebury_Turnover_fig = px.pie(Turnoverdata_Canterbury, values=Turnoverdata_Canterbury.values, names=Turnoverdata_Canterbury.index, title="Canterbury")
Cantebury_Turnover_fig.show()

turnover_Dover = south_east_districts_df[south_east_districts_df["Area_name"] == "Dover"]
print(turnover_Dover)

#Create dashboard that shows a pie charts of the turnover distribution of all the chosen districts.
from plotly.subplots import make_subplots
import plotly.graph_objects as go
#Highlight selected districts
selected_districts = ["Canterbury", "Hastings and Rye", "Isle of Wight", "Dover"]
#Create figure grid for dashboard
rows = 2
columns = 2
figure_grid = make_subplots(
    rows=rows,
    cols=columns,
    subplot_titles=selected_districts,
    specs=[[{"type": "domain"}]*columns for _ in range(rows)] )
#Create loop to go through each district
for i, district in enumerate(selected_districts):
    district_df = south_east_districts_df[
        south_east_districts_df["Area_name"] == district
    ]

    turnover_data = district_df[turnover_columns].iloc[0]
    turnover_data.index = [col.replace("_y","") for col in turnover_data.index]
    turnover_data = turnover_data[turnover_data > 0]

    if turnover_data.empty:
        print(f"Skipping {district}")
        continue

    figure_grid.add_trace(
        go.Pie(
            labels = turnover_data.index,
            values = turnover_data.values,
            textfont=dict(size = 8),
        ),
        row = (i // columns) + 1,
        col = (i % columns) + 1)
figure_grid.update_layout(legend_title_text= 'Turnover Bands',
                          title_text= "Turnover Distribution Across Districts",
                          showlegend = True, title_x = 0.5)
figure_grid.show()

from google.colab import files
#Save pie chart figure grid as html
figure_grid.write_html("Turnover_figure grid.html")
files.download("Turnover_figure grid.html")

#Create dashboard that shows a pie charts of the Employment bands distribution of all the chosen districts.
#Create figure grid for dashboard
figure_grid_2 = make_subplots(
    rows=rows,
    cols=columns,
    subplot_titles=selected_districts,
    specs=[[{"type": "domain"}]*columns for _ in range(rows)] )
#Specify turnover columns
Employment_bands = ['0-4', '5-9', '10-19', '20-49', '250+']
Employment_columns = [ col for col in south_east_districts_df. columns if (col.endswith('_x')or col in Employment_bands) and 'Total' not in col]
#Create loop to go through each district
for i, district in enumerate(selected_districts):
    district_df_2 = south_east_districts_df[
        south_east_districts_df["Area_name"] == district
    ]

    Employment_data = district_df_2[Employment_columns].iloc[0]
    Employment_data.index = [col.replace("_x","") for col in Employment_data.index]
    Employment_data = Employment_data[Employment_data > 0]

    if turnover_data.empty:
        print(f"Skipping {district}")
        continue

    figure_grid_2.add_trace(
        go.Pie(
            labels = Employment_data.index,
            values = Employment_data.values,
            textfont=dict(size = 8),
        ),
        row = (i // columns) + 1,
        col = (i % columns) + 1)
figure_grid_2.update_layout(legend_title_text= 'Employment Bands',
                          title_text= "Employment Distribution Across Districts",
                          showlegend = True, title_x = 0.5)
figure_grid_2.show()

#Save pie chart figure grid 2 as html
figure_grid_2.write_html("Employment_figure grid.html")
files.download("Employment_figure grid.html")

south_east_districts_df.head()

#Create scatter graphs that look at relationship between food and accomodation and arts and entertainment/retail
#import class
import plotly.express as px
#Retail scatter
retail_scatter = px.scatter( south_east_districts_df,
                            x= '55-56 : Accommodation & food services',
                            text = 'Area_name',
                            y= '47 : Retail',
                            title= 'Accommodation & Food services vs Retail',
                            labels = {'55-56 : Accommodation & food services': 'Accommodation and Food Businesses',
                                     '47 : Retail': 'Retail Businesses'})
retail_scatter.update_traces(textposition='top center')
retail_scatter.show()

#Highlight noticeable regions
noticeable_regions= ['Brighton - Pavilion', 'Isle of Wight', 'Hastings and Rye','Aylesbury', 'Southampton - Itchen', 'Meon Valley']

#Make new df to include column for noticeable regions
with_noticeable_regions_df = south_east_districts_df.copy()
with_noticeable_regions_df['noticeable_regions'] = with_noticeable_regions_df['Area_name']. where(with_noticeable_regions_df['Area_name'].isin(noticeable_regions),"")

#import class
import plotly.express as px

#Building Retail scatter with highlighted regions
Retail_2 = px.scatter(with_noticeable_regions_df,
                            x= '55-56 : Accommodation & food services',
                            y= '47 : Retail',
                            hover_name= 'Area_name',
                             text= 'noticeable_regions',
                             title = 'Accommodation & Food services vs Retail Services',
                            labels = {'55-56 : Accommodation and food services': 'Accommodation & Food Businesses',
                                     '47 : Retail': 'Retail'},)
Retail_2.update_xaxes(showgrid=False, range=[0, None], title_text = 'Accommodation and Food')
Retail_2.update_yaxes(showgrid=False, range=[0, None],)
Retail_2.update_traces(textposition='bottom center')
#Add annotations
#High arts and high food
Retail_2.add_annotation(
    x= 600,
    y=1200,
    text = "Synergy between commercial ecosystem and demand for food businesses",
    showarrow= False,
    font=dict(size=14, color="black"),
    bgcolor= 'lightgreen',
    bordercolor= "black",
    borderwidth = 1
)
#high arts
Retail_2.add_annotation(
    x= 150,
    y=1200,
    text = "Potential opportunity",
    showarrow= False,
    font=dict(size=14, color="black"),
    bgcolor= 'lightyellow',
    bordercolor= "black",
    borderwidth = 1
)

#Save Retail scatter 2 as html
#call on colabs
from google.colab import files
Retail_2.write_html("Retail_scatter_annotated.html")
files.download("Retail_scatter_annotated.html")

#Arts and entertainment scatter
Arts_scatter = px.scatter( south_east_districts_df,
                            x= '55-56 : Accommodation & food services',
                            y= '90-99 : Arts, entertainment, recreation & other services',
                            hover_name= 'Area_name',
                            title= 'Accommodation & Food services vs Arts, entertainment and recreation',
                            labels = {'55-56 : Accommodation & food services': 'Accommodation and Food Businesses',
                                     '90-99 : Arts, entertainment, recreation & other services': 'Arts, entertainment and recreation Businesses'})
Arts_scatter.show()

#Highlight interesting regions for purpose of report visual
noticeable_regions_2= ['Brighton - Pavilion', 'Isle of Wight', 'Hastings and Rye','Portsmouth South', 'Folkestone and Hythe', 'Reading East', 'Hove', 'Esher and Walton','Beaconfield','Bracknell', 'Chatham and Aylesford']
#Make new df to include column for noticeable regions
with_noticeable_regions_df_2 = south_east_districts_df.copy()
with_noticeable_regions_df_2['noticeable_region_2'] = with_noticeable_regions_df_2['Area_name']. where(with_noticeable_regions_df_2['Area_name'].isin(noticeable_regions_2),"")

#import class
import plotly.express as px

#Building arts scatter with highlighted regions
Arts_scatter_2 = px.scatter( with_noticeable_regions_df_2,
                            x= '55-56 : Accommodation & food services',
                            y= '90-99 : Arts, entertainment, recreation & other services',
                            hover_name= 'Area_name',
                             text= 'noticeable_region_2',
                             title = 'Accommodation & Food services vs Arts, entertainment & recreation',
                             labels = {'55-56 : Accommodation and food services': 'Accommodation & Food Businesses',
                                     '90-99 : Arts, entertainment, recreation & other services': 'Arts, entertainment & recreation Businesses'})
Arts_scatter_2.update_xaxes(showgrid=False, range=[0, None], title_text = "Accommodation and Food")
Arts_scatter_2.update_yaxes(showgrid=False, range=[0, None])
Arts_scatter_2.update_traces(textposition='bottom center')
Arts_scatter_2.show()
#Add annotations
#High arts and high food
Arts_scatter_2.add_annotation(
    x= 600,
    y=570,
    text = "Strong cultural and food services economic ecosystem assimilation",
    showarrow= False,
    font=dict(size=14, color="black"),
    bgcolor= 'lightgreen',
    bordercolor= "black",
    borderwidth = 1
)
#high arts
Arts_scatter_2.add_annotation(
    x= 220,
    y=590,
    text = "Potential opportunity",
    showarrow= False,
    font=dict(size=14, color="black"),
    bgcolor= 'lightyellow',
    bordercolor= "black",
    borderwidth = 1
)

#Save arts scatter 2 as html
#call on colabs
from google.colab import files
Arts_scatter_2.write_html("Arts_scatter_annotated.html")
files.download("Arts_scatter_annotated.html")

#Import ons consensus datasets
import pandas as pd
#Age dataset
Age_data = pd.read_excel('/content/TS007-2021-1.xlsx', sheet_name = 'Dataset')
#Ethnicity dataset
Ethnicity_data = pd.read_excel('/content/TS021-2021-1.xlsx', sheet_name = 'Dataset')
#Religion dataset
Religion_data = pd.read_excel('/content/TS030-2021-1.xlsx', sheet_name = 'Dataset')
#Check formatting

#Check formatting
print(Age_data.head())
print(Ethnicity_data.head())
print(Religion_data.head())

#check for missing values
print(Age_data.isnull().sum())
print(Ethnicity_data.isnull().sum())
print(Religion_data.isnull().sum())

print(Age_data.dtypes)
print(Ethnicity_data.dtypes)
print(Religion_data.dtypes)

#Create colour schema for plots
district_colors = {
    'Brighton and Hove': 'tomato',
    'Reading': 'royalblue',
    'East Hampshire': 'yellow'
}

#filter for specific districts
#establish areas of interest
areas_of_interest = ['Brighton and Hove', 'Reading', 'East Hampshire']
AOI_Age = Age_data[Age_data['Lower Tier Local Authorities'].isin(areas_of_interest)]
AOI_ethnicity = Ethnicity_data[Ethnicity_data['Lower Tier Local Authorities'].isin(areas_of_interest)]
AOI_religion = Religion_data[Religion_data['Lower Tier Local Authorities'].isin(areas_of_interest)]
AOI_Age.head()

#Bin Age variable into age bands
#Create bins
age_bins = [0, 14, 24, 44, 64, 101]
age_labels = ['0-14', '15-24', '25-44', '45-64', '65+']
#Create age labels
AOI_Age['Age Band'] = pd.cut(AOI_Age['Age (101 categories) Code'], bins=age_bins, labels=age_labels, right = True, include_lowest = True)
#sum for each age band
age_grouped = AOI_Age.groupby(['Lower Tier Local Authorities', 'Age Band'])['Observation'] . sum() . reset_index()

import plotly.express as px
#Plot age bar chart
age_barchart = px.bar(age_grouped,
                      x='Observation',
                      y='Age Band',
                      labels={"Lower Tier Local Authorities": "Districts",
                              "Observation": "Count"},
                      color='Lower Tier Local Authorities',
                      color_discrete_map=district_colors,
                      orientation = "h",
                      barmode='stack',
                      width = 500)
age_barchart.update_layout(xaxis_title=None,
                           xaxis=dict(showgrid=False),
    yaxis=dict(showgrid=False), showlegend = False)
age_barchart.show()

#Plot treemap for ethnicitiy
ethnicity_treemap= px.treemap(
    AOI_ethnicity,
    path=['Lower Tier Local Authorities', 'Ethnic group (20 categories)'],
    values='Observation',
    color='Lower Tier Local Authorities',
    color_discrete_map={
        'Brighton and Hove': 'tomato',
        'Reading': 'royalblue',
        'East Hampshire': 'yellow'},)
# add labels
ethnicity_treemap.update_traces(
    textinfo='label+value')
ethnicity_treemap.show()
#Change font sizes
ethnicity_treemap.update_layout(uniformtext=dict(minsize=10, mode='show'),font=dict(size=18))

#Plot group bar chart for religious demographic
#Filter to remove does not apply as it has no observations
filtered_AOI_Religion = AOI_religion[AOI_religion['Religion (10 categories)'] != 'Does not apply']
#Plot bar
religion_barchart = px.bar(filtered_AOI_Religion,
                      x='Religion (10 categories)',
                      y='Observation',
                           color = 'Lower Tier Local Authorities',
                           color_discrete_map=district_colors,
                      labels={"Religion (10 Categories)": "Religion",
                              "Observation": "Count",
                              "Lower Tier Local Authority":"District"},width = 800)

religion_barchart.update_layout(yaxis_title=None, xaxis_tickangle=-45,
                                plot_bgcolor='white',
                                xaxis=dict(showgrid=False),
                                yaxis=dict(showgrid=False),
                                showlegend=False)
religion_barchart.show()

#Create dashboard visual to present visual for demography
# Create the dashboard canvas
#Import class
from plotly.subplots import make_subplots
Demography_dashboard = make_subplots(
    rows=2, cols=2,
    specs=[
        [{"type": "xy"}, {"type": "xy"}],
        [{"type": "domain", "colspan": 2}, None]
    ],
    subplot_titles=("Age Distribution", "Religion Distribution", "Ethnicity Treemap")
)
# Add age bar chart
for trace in age_barchart.data:
  trace.showlegend = True
  Demography_dashboard.add_trace(trace, row=1, col=1)
  legendgroup="Districts"
# Add religion bar chart
for trace in religion_barchart.data:
    trace.legendgroup = "Districts"
    trace.showlegend = False
    Demography_dashboard.add_trace(trace, row=1, col=2)

# Add treemap
for trace in ethnicity_treemap.data:
    Demography_dashboard.add_trace(trace, row=2, col=1)
#Adjust layout of dashboard
Demography_dashboard.update_layout(height = 1000, title_text="Demography Dashboard", showlegend= True, legend_title_text="District")
#Show dashboard
Demography_dashboard.show()

#save dashboard as html
from google.colab import files
Demography_dashboard.write_html("Demography_dashboard.html")
files.download("Demography_dashboard.html")